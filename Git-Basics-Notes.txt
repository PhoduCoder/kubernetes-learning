Untracked files means git is not using to track these files

Commit only saves the code locally 

Git push will then push the files to remote 

You would need to do some authentication from your local machine to Github
============
You can use a PAT token
Or you can use ssh-keygen 
Have the private key on your system
and have the public key added in the github public settings on Github 

Start the ssh-agent in the background

Now in you ssh config, add an entry for this pub key and 

you have to tell the ssh-agent to use that public key 
using the ssh-add command 

https://www.youtube.com/redirect?event=video_description&redir_token=QUFFLUhqa2llREdueTZ3cTJLeVhYX1gtcjRqcUlJZ3VOZ3xBQ3Jtc0ttT0J3SkM2VkRISTBOUzcybmxvcFhpQkJxdXJ6eklwXzNfd28wbnVmN0lDWVlpNEdlcEdaeXh0dXhZVmV3YVBuYXBrcUFjTWpkQUNkSE5uS29WY2x0SXlRRTlpbGdHLXQtMGdKdEEwNjd5anZaZDNWZw&q=https%3A%2F%2Fhelp.github.com%2Fen%2Fgithub%2Fauthenticating-to-github%2Fgenerating-a-new-ssh-key-and-adding-it-to-the-ssh-agent&v=RGOj5yH7evk

============

git push origin master 
origin 
master is the branch that we are pushing to

=======

Now the above steps work when you have a remote Github repo that you are trying to clone on your local machine using 
git clone

But how about when you start from your local machine first and then create a repo in github later

====

So the first command you do inside your local repo is

git init 

Now if you add files and then issue "git add . " and "git commit -m "Message" "

then if you run "git push origin master " - this will give us an error

The reason is git doesn't know what the remote is 

So we do 

git remote add origin <Remote-repo-URL>

Now once done you can do 
git push origin master


====

Now if you just want to do a git push instead of the entire thing
you can say 

git push -u origin master 
You will have to set upstream by default 

====

If the repo that we are pushing into and we don't have proper 
access permissions then we would need to additionally do a git pull request 

====

Git Branching 

git branch : List all the branches 
* denotes the branch that you are currently in 


To switch between branches use git checkout command

To create a new branch 
git checkout -b <name of branch >

Eg. if you are working on an issue
you can do a 

git checkout -b feature/issue-number 

To move to a separate branch , use the 
git checkout master 
< To move to master branch>

======



